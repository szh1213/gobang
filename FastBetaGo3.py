# -*- coding: utf-8 -*-
"""
FastBetaGo3
Created on Tue Dec 11 14:05:24 2018

@author: SZH1213
"""

from random import randint
from time import time
lib=[[0, 100000, 0, 2, 2, 2, 2], [1, 100000, 2, 0, 2, 2, 2], [2, 100000, 2, 2, 0, 2, 2], [4, 100000, 2, 2, 2, 2, 0], [3, 100000, 2, 2, 2, 0, 2]]\
     +[[0, 2000, 0, 1, 1, 1, 1], [1, 2000, 1, 0, 1, 1, 1], [2, 2000, 1, 1, 0, 1, 1], [4, 2000, 1, 1, 1, 1, 0], [3, 2000, 1, 1, 1, 0, 1]]\
     +[[0, 600, 0, 2, 2, 2, 0], [4, 600, 0, 2, 2, 2, 0], [0, 0.1, 0, 2, 2, 2, 0, 1], [0, 0.1, 0, 2, 2, 2, 0, 9], [2, 600.1, 0, 2, 0, 2, 2, 0], [5, 0.1, 1, 0, 2, 2, 2, 0], [5, 0.1, 9, 0, 2, 2, 2, 0], [3, 600.1, 0, 2, 2, 0, 2, 0]]\
     +[[0, 86, 0, 1, 1, 1, 0], [4, 86, 0, 1, 1, 1, 0], [0, 0.1, 0, 1, 1, 1, 0, 2], [0, 0.1, 0, 1, 1, 1, 0, 9], [2, 86, 0, 1, 0, 1, 1, 0], [1, -0.1, 2, 0, 1, 1, 1, 0], [1, -0.1, 0, 1, 1, 1, 0, 9], [5, 0.1, 2, 0, 1, 1, 1, 0], [5, 0.1, 9, 0, 1, 1, 1, 0], [3, 86, 0, 1, 1, 0, 1, 0], [4, -0.1, 0, 1, 1, 1, 0, 2], [4, -0.1, 9, 0, 1, 1, 1, 0]]\
     +[[0, 60, 0, 2, 0, 2, 2, 1], [2, 60, 0, 2, 0, 2, 2, 1], [0, 60, 0, 2, 0, 2, 2, 9], [2, 60, 0, 2, 0, 2, 2, 9], [0, 60, 0, 2, 2, 0, 2, 1], [3, 60, 0, 2, 2, 0, 2, 1], [0, 60, 0, 2, 2, 0, 2, 9], [3, 60, 0, 2, 2, 0, 2, 9], [1, 60, 2, 0, 0, 2, 2, 1], [2, 60, 2, 0, 0, 2, 2, 1], [1, 60, 2, 0, 0, 2, 2, 9], [2, 60, 2, 0, 0, 2, 2, 9], [1, 60, 2, 0, 2, 0, 2, 1], [3, 60, 2, 0, 2, 0, 2, 1], [1, 60, 2, 0, 2, 0, 2, 9], [3, 60, 2, 0, 2, 0, 2, 9], [0, 60, 0, 0, 2, 2, 2, 1], [1, 60, 0, 0, 2, 2, 2, 1], [0, 60, 0, 0, 2, 2, 2, 9], [1, 60, 0, 0, 2, 2, 2, 9], [5, 60, 1, 2, 2, 0, 2, 0], [3, 60, 1, 2, 2, 0, 2, 0], [5, 60, 9, 2, 2, 0, 2, 0], [3, 60, 9, 2, 2, 0, 2, 0], [5, 60, 1, 2, 0, 2, 2, 0], [2, 60, 1, 2, 0, 2, 2, 0], [5, 60, 9, 2, 0, 2, 2, 0], [2, 60, 9, 2, 0, 2, 2, 0], [4, 60, 1, 2, 2, 0, 0, 2], [3, 60, 1, 2, 2, 0, 0, 2], [4, 60, 9, 2, 2, 0, 0, 2], [3, 60, 9, 2, 2, 0, 0, 2], [4, 60, 1, 2, 0, 2, 0, 2], [2, 60, 1, 2, 0, 2, 0, 2], [4, 60, 9, 2, 0, 2, 0, 2], [2, 60, 9, 2, 0, 2, 0, 2], [5, 60, 1, 2, 2, 2, 0, 0], [4, 60, 1, 2, 2, 2, 0, 0], [5, 60, 9, 2, 2, 2, 0, 0], [4, 60, 9, 2, 2, 2, 0, 0]]\
     +[[0, 50, 0, 1, 0, 1, 1, 2], [2, 50, 0, 1, 0, 1, 1, 2], [0, 50, 0, 1, 0, 1, 1, 9], [2, 50, 0, 1, 0, 1, 1, 9], [0, 50, 0, 1, 1, 0, 1, 2], [3, 50, 0, 1, 1, 0, 1, 2], [0, 50, 0, 1, 1, 0, 1, 9], [3, 50, 0, 1, 1, 0, 1, 9], [1, 50, 1, 0, 0, 1, 1, 2], [2, 50, 1, 0, 0, 1, 1, 2], [1, 50, 1, 0, 0, 1, 1, 9], [2, 50, 1, 0, 0, 1, 1, 9], [1, 50, 1, 0, 1, 0, 1, 2], [3, 50, 1, 0, 1, 0, 1, 2], [1, 50, 1, 0, 1, 0, 1, 9], [3, 50, 1, 0, 1, 0, 1, 9], [0, 50, 0, 0, 1, 1, 1, 2], [1, 50, 0, 0, 1, 1, 1, 2], [0, 50, 0, 0, 1, 1, 1, 9], [1, 50, 0, 0, 1, 1, 1, 9], [5, 50, 2, 1, 1, 0, 1, 0], [3, 50, 2, 1, 1, 0, 1, 0], [5, 50, 9, 1, 1, 0, 1, 0], [3, 50, 9, 1, 1, 0, 1, 0], [5, 50, 2, 1, 0, 1, 1, 0], [2, 50, 2, 1, 0, 1, 1, 0], [5, 50, 9, 1, 0, 1, 1, 0], [2, 50, 9, 1, 0, 1, 1, 0], [4, 50, 2, 1, 1, 0, 0, 1], [3, 50, 2, 1, 1, 0, 0, 1], [4, 50, 9, 1, 1, 0, 0, 1], [3, 50, 9, 1, 1, 0, 0, 1], [4, 50, 2, 1, 0, 1, 0, 1], [2, 50, 2, 1, 0, 1, 0, 1], [4, 50, 9, 1, 0, 1, 0, 1], [2, 50, 9, 1, 0, 1, 0, 1], [5, 50, 2, 1, 1, 1, 0, 0], [4, 50, 2, 1, 1, 1, 0, 0], [5, 50, 9, 1, 1, 1, 0, 0], [4, 50, 9, 1, 1, 1, 0, 0]]\
     +[[0, 35, 0, 0, 2, 2, 0], [3, 35, 2, 0, 2, 0, 0], [2, 35, 0, 2, 0, 0, 2, 0], [3, 35, 0, 2, 0, 0, 2, 0], [1, 35.1, 0, 0, 2, 2, 0], [2, 35.1, 0, 2, 0, 2, 0], [0, -35, 0, 0, 2, 2, 0, 2], [3, -35, 2, 2, 0, 2, 0, 0], [1, -35, 2, 2, 0, 0, 2, 0], [2, -35, 2, 2, 0, 0, 2, 0], [1, -35.1, 0, 0, 2, 2, 0, 2], [2, -35.1, 2, 0, 2, 0, 2, 0], [4, 35, 0, 2, 2, 0, 0], [1, 35, 0, 0, 2, 0, 2], [3, 35.1, 0, 2, 2, 0, 0], [5, -35, 2, 0, 2, 2, 0, 0], [2, -35, 0, 0, 2, 0, 2, 2], [4, -35, 0, 2, 0, 0, 2, 2], [3, -35, 0, 2, 0, 0, 2, 2], [4, -35.1, 2, 0, 2, 2, 0, 0], [3, -35.1, 0, 2, 0, 2, 0, 2]]\
     +[[0, 27, 0, 0, 1, 1, 0], [3, 27, 1, 0, 1, 0, 0], [1, 27, 1, 0, 0, 1, 0], [2, 27, 1, 0, 0, 1, 0], [1, 27.1, 0, 0, 1, 1, 0], [2, 27.1, 0, 1, 0, 1, 0], [0, -27, 0, 0, 1, 1, 0, 1], [3, -27, 1, 1, 0, 1, 0, 0], [1, -27, 1, 1, 0, 0, 1, 0], [2, -27, 1, 1, 0, 0, 1, 0], [1, -27.1, 0, 0, 1, 1, 0, 1], [2, -27.1, 1, 0, 1, 0, 1, 0], [4, 27, 0, 1, 1, 0, 0], [1, 27, 0, 0, 1, 0, 1], [3, 27, 0, 1, 0, 0, 1], [2, 27, 0, 1, 0, 0, 1], [3, 27.1, 0, 1, 1, 0, 0], [5, -27, 1, 0, 1, 1, 0, 0], [2, -27, 0, 0, 1, 0, 1, 1], [4, -27, 0, 1, 0, 0, 1, 1], [3, -27, 0, 1, 0, 0, 1, 1], [4, -27.1, 1, 0, 1, 1, 0, 0], [3, -27.1, 0, 1, 0, 1, 0, 1]]
    
def next(qipan,clockwisechat,anticlockwisechat,whoturn,me):
    ablelist,chat,maxlo=[],[],[0,0]
    mysize=len(qipan)
    t=time()
    for i in range(mysize):
        ablelist.append([])
        chat.append([])
        for j in range(mysize):
            ablelist[i].append(0)
            chat[i].append(qipan[i][j])
            
    for j in range(6):
        chat.append([])
        for i in range(mysize):
            chat[i].append(9)
        for i in range(mysize+6):
            chat[-1].append(9)
        for i in range(mysize<<1-1):
            clockwisechat[i].append(9)
            anticlockwisechat[i].append(9)
    
    if me==2:
        for i in range(mysize):
            for j in range(mysize):
                if chat[i][j]:
                    chat[i][j]=3-chat[i][j]
    for i in range(mysize):
        for j in range(mysize):
            if chat[i][j]==0:
                for v in [[0,1],[1,0],[1,1],[1,-1],[0,-1],[-1,0],[-1,-1],[-1,1]]:
                    if -1<i+v[0]<mysize and -1<j+v[1]<mysize:
                        if chat[i+v[0]][j+v[1]]==3-me:
                            ablelist[i][j]+=-0.005
                        elif chat[i+v[0]][j+v[1]]==0:
                            ablelist[i][j]+=0.0001 if ablelist[i][j]>0 else -0.0001
                        elif chat[i+v[0]][j+v[1]]==me:
                            ablelist[i][j]+=0.005
                ablelist[i][j]=abs(ablelist[i][j])+randint(-1,1)/100000
            clocki=i+j
            clockj=j if i+j<mysize else mysize-1-i
            anticlocki=mysize-1-j+i
            anticlockj=min(i,j)
            for ilib in lib:
                lb=len(ilib)-2
                strb=chat[i][j:j+lb]
                if ilib[2:] == strb:
                    #print(strb,[j+1,chr(i+65)],[j+ilib[0]+1,chr(i+65)],ilib[1])
                    ablelist[i][j+ilib[0]]+=ilib[1]+randint(-1,1)/1000
                strb=[ichat[j] for ichat in chat[i:i+lb]]
                if ilib[2:] == strb:
                    #print(strb,[j+1,chr(i+65)],[j+ilib[0]+1,chr(i+ilib[0]+65)],ilib[2])
                    ablelist[i+ilib[0]][j]+=ilib[1]+randint(-1,1)/1000
                    
                strb=clockwisechat[clocki][clockj:clockj+lb]
                if ilib[2:] == strb:
                    #print(strb,[(j if i<mysize else j+i-mysize+1)+1,chr(min(i,mysize-1)-j+65)],end=' ')
                    
                    #print([(j if i<mysize else j+i-mysize+1)+1,chr(min(i,mysize-1)-j+65)],ilib[2])
                    ablelist[i-ilib[0]][j+ilib[0]]+=ilib[1]+randint(-1,1)/1000
                strb=anticlockwisechat[anticlocki][anticlockj:anticlockj+lb]
                if ilib[2:] == strb:
                    #print(strb,[(abs(i-mysize+1)+j if i<mysize else j)+1,chr((j if i<mysize else j+i-mysize+1)+65)],end=' ')
                    
                    #print([(abs(i-mysize+1)+j if i<mysize else j)+1,chr((j if i<mysize else j+i-mysize+1)+65)],ilib[2])
                    ablelist[i+ilib[0]][j+ilib[0]]+=ilib[1]+randint(-1,1)/1000
    if whoturn == 0:
        ablelist[mysize>>1][mysize>>1]+=0.1
    for i in range(mysize):
        for j in range(mysize):
            if ablelist[i][j]>ablelist[maxlo[0]][maxlo[1]]:
                maxlo=[i,j]
    #print([maxlo[1]+1,chr(65+maxlo[0])],ablelist[maxlo[0]][maxlo[1]])
    #print('FastBetaGo3',time()-t)
    return [maxlo[0],maxlo[1]]
